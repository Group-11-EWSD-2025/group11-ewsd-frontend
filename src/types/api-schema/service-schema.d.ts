/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/workspaces/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Workspaces */
        get: operations["get_all_workspaces_api_workspaces__get"];
        put?: never;
        /** Create Workspace */
        post: operations["create_workspace_api_workspaces__post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/create_tab": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Tab */
        post: operations["create_tab_api_workspaces_create_tab_post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/related_documents/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Related Documents By Query */
        get: operations["related_documents_by_query_api_workspaces__workspace_id__related_documents_query_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/tabs/{tab_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tab */
        get: operations["get_tab_api_workspaces__workspace_id__tabs__tab_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/get_workspace_by_id/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workspace By Id */
        get: operations["get_workspace_by_id_api_workspaces_get_workspace_by_id__workspace_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/chat-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Workspace Chat History
         * @description Endpoint to update the chat history of a workspace.
         */
        put: operations["update_workspace_chat_history_api_workspaces__workspace_id__chat_history_put"];
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/related-documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Related Documents */
        get: operations["get_all_related_documents_api_workspaces_related_documents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/add_comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Comment */
        post: operations["add_comment_api_workspaces_add_comment_post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/open_or_close_tab/{workspace_id}/{tab_id}/{is_open}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Open Or Close Tab */
        put: operations["open_or_close_tab_api_workspaces_open_or_close_tab__workspace_id___tab_id___is_open__put"];
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/delete_workspace/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Workspace */
        delete: operations["delete_workspace_api_workspaces_delete_workspace__workspace_id__delete"];
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/resolve_comment/{workspace_id}/{tab_id}/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resolve Comment */
        put: operations["resolve_comment_api_workspaces_resolve_comment__workspace_id___tab_id___comment_id__put"];
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notifications
         * @description Get all notifications for the authenticated user.
         *
         *     Retrieves all notifications associated with the authenticated user's ID.
         *
         *     Args:
         *         user (dict): The authenticated user information from Keycloak
         *
         *     Returns:
         *         BaseResponseModel[List[NotificationResponseDTO]]: Response containing list of notifications
         *
         *     Raises:
         *         HTTPException: If fetching notifications fails
         */
        get: operations["get_notifications_api_notifications__get"];
        put?: never;
        /**
         * Create Notification
         * @description Create a new notification.
         *
         *     Creates a notification for a specific user and publishes it to the message queue.
         *
         *     Args:
         *         request (NotificationCreateDTO): The notification details to create
         *         user (dict): The authenticated user information from Keycloak
         *
         *     Returns:
         *         BaseResponseModel[NotificationResponseDTO]: Response containing the created notification
         *
         *     Raises:
         *         HTTPException: If notification creation fails
         *
         *     Example:
         *     {
         *         "type": "noti",
         *         "message": "Hello",
         *         "payload": {"data": "Example data"}
         *     }
         */
        post: operations["create_notification_api_notifications__post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{notification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notification
         * @description Get a specific notification by ID for the authenticated user.
         *
         *     Retrieves a single notification by its ID, verifying it belongs to the authenticated user.
         *
         *     Args:
         *         notification_id (str): The ID of the notification to retrieve
         *         user (dict): The authenticated user information from Keycloak
         *
         *     Returns:
         *         BaseResponseModel[NotificationResponseDTO]: Response containing the notification
         *
         *     Raises:
         *         HTTPException: If fetching notification fails
         */
        get: operations["get_notification_api_notifications__notification_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{notification_id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark Notification Read Status
         * @description Mark a notification as read for the authenticated user.
         *
         *     Updates the read status of a notification to true, verifying it belongs to the authenticated user.
         *
         *     Args:
         *         notification_id (str): The ID of the notification to mark as read
         *         status (bool): The status to mark the notification as
         *         user (dict): The authenticated user information from Keycloak
         *
         *     Returns:
         *         BaseResponseModel[bool]: Response indicating success/failure of the operation
         *
         *     Raises:
         *         HTTPException: If marking notification as read fails
         */
        put: operations["mark_notification_read_status_api_notifications__notification_id__read_put"];
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting-events/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Protected Route */
        get: operations["protected_route_api_meeting_events_protected_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting-events/workspace/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Meeting Events */
        get: operations["get_all_meeting_events_api_meeting_events_workspace__workspace_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting-events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Meeting Event By Id */
        get: operations["get_meeting_event_by_id_api_meeting_events__id__get"];
        /** Update Meeting Event */
        put: operations["update_meeting_event_api_meeting_events__id__put"];
        post?: never;
        /** Delete Meeting Event */
        delete: operations["delete_meeting_event_api_meeting_events__id__delete"];
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting-events/room/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify Room Password */
        post: operations["verify_room_password_api_meeting_events_room_verify_password_post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting-events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Meeting Event */
        post: operations["create_meeting_event_api_meeting_events__post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a document
         * @description Upload a document file along with its description.
         *
         *     - **description**: Description of the document
         *     - **upload_file**: The document file to be uploaded
         */
        post: operations["upload_document_api_documents_upload_post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for documents
         * @description Search for documents matching the query.
         *
         *     - **query**: The search term to use for finding relevant documents.
         */
        get: operations["search_api_documents_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get information about the currently authenticated user from their JWT token.
         *
         *     Returns:
         *         BaseResponseModel: Response containing user information from the token
         */
        get: operations["get_current_user_api_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/s3/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Files */
        get: operations["list_files_api_s3_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/s3/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_api_s3_upload_post"];
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/s3/download/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download File */
        get: operations["download_file_api_s3_download__file_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/s3/delete/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete File */
        delete: operations["delete_file_api_s3_delete__file_name__delete"];
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Openapi Json
         * @description Serve OpenAPI JSON format.
         *
         *     This function returns the OpenAPI schema of the API in JSON format.
         *
         *     Returns:
         *         JSONResponse: The OpenAPI schema in JSON format.
         */
        get: operations["get_openapi_json_openapi_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 200 response */
                200: {
                    headers: {
                        "Access-Control-Allow-Origin"?: string;
                        "Access-Control-Allow-Methods"?: string;
                        "Access-Control-Allow-Headers"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BaseResponseModel[GetMeetingEventDto] */
        BaseResponseModelGetMeetingEventDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            data?: components["schemas"]["GetMeetingEventDto"];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[GetTabDto] */
        BaseResponseModelGetTabDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            data?: components["schemas"]["GetTabDto"];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[GetWorkspaceDto] */
        BaseResponseModelGetWorkspaceDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            data?: components["schemas"]["GetWorkspaceDto"];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[List[GetAllRelateDocumentDto]] */
        BaseResponseModelListGetAllRelateDocumentDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: components["schemas"]["GetAllRelateDocumentDto"][];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[List[GetAllWorkspaceDto]] */
        BaseResponseModelListGetAllWorkspaceDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: components["schemas"]["GetAllWorkspaceDto"][];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[List[GetMeetingEventDto]] */
        BaseResponseModelListGetMeetingEventDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: components["schemas"]["GetMeetingEventDto"][];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[List[GetRelatedDocumentsEmbeddingsDto]] */
        BaseResponseModelListGetRelatedDocumentsEmbeddingsDto: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: components["schemas"]["GetRelatedDocumentsEmbeddingsDto"][];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[List[NotificationResponseDTO]] */
        BaseResponseModelListNotificationResponseDTO: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: components["schemas"]["NotificationResponseDTO"][];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[NoneType] */
        BaseResponseModelNoneType: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: unknown;
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[NotificationResponseDTO] */
        BaseResponseModelNotificationResponseDTO: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            data?: components["schemas"]["NotificationResponseDTO"];
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[bool] */
        BaseResponseModelbool: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: boolean;
            /** Error */
            error?: unknown;
        };
        /** BaseResponseModel[dict] */
        BaseResponseModeldict: {
            /** Code */
            code: number;
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: Record<string, never>;
            /** Error */
            error?: unknown;
        };
        /** Body_create_tab_api_workspaces_create_tab_post */
        Bodycreatetabapiworkspacescreatetabpost: {
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /** File */
            file?: string;
        };
        /** Body_create_workspace_api_workspaces__post */
        Bodycreateworkspaceapiworkspacespost: {
            /**
             * Module Name
             * @description Module name
             */
            module_name: string;
            /**
             * Workspace Name
             * @description Workspace name
             */
            workspace_name: string;
            /**
             * Description
             * @description Description of the workspace
             */
            description: string;
            /**
             * Related Document Ids
             * @description List of related document IDs
             */
            related_document_ids: string[];
            /** Files */
            files: string[];
        };
        /** Body_upload_document_api_documents_upload_post */
        Bodyuploaddocumentapidocumentsuploadpost: {
            /**
             * Description
             * @description Description of the document.
             */
            description: string;
            /**
             * Upload File
             * Format: binary
             * @description The document file to be uploaded.
             */
            upload_file: string;
        };
        /** Body_upload_file_api_s3_upload_post */
        Bodyuploadfileapis3uploadpost: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** CreateCommentRequest */
        CreateCommentRequest: {
            /**
             * Workspace Id
             * @description ID of the workspace
             */
            workspace_id: string;
            /**
             * Tab Id
             * @description ID of the tab where the comment will be added
             */
            tab_id: string;
            /**
             * Text
             * @description The comment text
             */
            text: string;
            /**
             * Selected Text
             * @description The selected text that the comment refers to
             */
            selected_text: string;
            /**
             * Selection Start
             * @description Start position of the selected text
             */
            selection_start: number;
            /**
             * Selection End
             * @description End position of the selected text
             */
            selection_end: number;
            /**
             * Ai Suggestion
             * @description Optional AI suggestion
             */
            ai_suggestion?: string;
            /**
             * Author
             * @description Author of the comment
             */
            author: string;
            /**
             * User Id
             * @description User ID of the comment author
             */
            user_id: string;
        };
        /** CreatedMeetingEventRequest */
        CreatedMeetingEventRequest: {
            /** Title */
            title: string;
            /** Workspace Id */
            workspace_id: string;
            /** Achieved Description */
            achieved_description: string;
            /** Password */
            password: string;
            /** Transcript Content */
            transcript_content?: string;
            /** Audio File Path */
            audio_file_path?: string;
            /** Audio File Name */
            audio_file_name?: string;
            /** Audio File Extension */
            audio_file_extension?: string;
            /** Organizer Id */
            organizer_id?: string;
            /**
             * Participant Ids
             * @default []
             */
            participant_ids: string[];
            /** Location */
            location?: string;
        };
        /** GetAllRelateDocumentDto */
        GetAllRelateDocumentDto: {
            /** Id */
            id: string;
            /** Module Name */
            module_name: string;
            /** Country */
            country: string;
            /** Description */
            description: string;
            /** File Name */
            file_name: string;
            /** File Path */
            file_path: string;
        };
        /** GetAllWorkspaceDto */
        GetAllWorkspaceDto: {
            /** Id */
            id: string;
            /** Module Name */
            module_name: string;
            /** Workspace Name */
            workspace_name: string;
            /** Related Document Count */
            related_document_count: number;
            /** Is Deleted */
            is_deleted: boolean;
        };
        /** GetMeetingEventDto */
        GetMeetingEventDto: {
            /** Id */
            id: string;
            /** Module Name */
            module_name: string;
            /** Workspace Id */
            workspace_id: string;
            /** Title */
            title: string;
            /** Achieved Description */
            achieved_description?: string;
            /** Password */
            password: string;
            /** Meeting Link */
            meeting_link?: string;
            /** Room Id */
            room_id?: string;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Transcript Content */
            transcript_content?: string;
            /** Audio File Path */
            audio_file_path?: string;
            /** Audio File Name */
            audio_file_name?: string;
            /** Audio File Extension */
            audio_file_extension?: string;
            /** Organizer Id */
            organizer_id: string;
            /**
             * Participant Ids
             * @default []
             */
            participant_ids: string[];
            /** Location */
            location?: string;
            status: components["schemas"]["MeetingEventStatus"];
        };
        /** GetRelatedDocumentsEmbeddingsDto */
        GetRelatedDocumentsEmbeddingsDto: {
            /** Document Id */
            document_id: string;
            /** Text Content */
            text_content: string;
            /** Source */
            source: string;
            /** Page */
            page: number;
            /** Embedding */
            embedding: number[];
        };
        /** GetTabDto */
        GetTabDto: {
            /** Tab Id */
            tab_id: string;
            /** Tab Name */
            tab_name: string;
            /** Tab Type */
            tab_type: string;
            upload_document?: components["schemas"]["UploadDocumentModel"];
            /** Tab Content */
            tab_content?: Record<string, never>;
            /**
             * Is Active
             * @default false
             */
            is_active: boolean;
            /**
             * Is Open
             * @default false
             */
            is_open: boolean;
            /**
             * Is Permanent
             * @default false
             */
            is_permanent: boolean;
            /**
             * Is Deleted
             * @default false
             */
            is_deleted: boolean;
        };
        /** GetWorkspaceDto */
        GetWorkspaceDto: {
            /** Id */
            _id: string;
            /** Module Name */
            module_name: string;
            /** Workspace Name */
            workspace_name: string;
            /** Description */
            description?: string;
            /** Related Document Ids */
            related_document_ids: string[];
            /** Tabs */
            tabs: Record<string, never>[];
            /** Chat History */
            chat_history: Record<string, never>[];
            /** Is Deleted */
            is_deleted: boolean;
            /** Created By */
            created_by: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated By */
            updated_by: string;
            /** Updated At */
            updated_at: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * MeetingEventStatus
         * @enum {string}
         */
        MeetingEventStatus: "Scheduled" | "InProgress" | "Completed" | "Cancelled";
        /** NotificationCreateDTO */
        NotificationCreateDTO: {
            /** Type */
            type: string;
            /** Message */
            message: string;
            /** Payload */
            payload?: Record<string, never>;
        };
        /** NotificationResponseDTO */
        NotificationResponseDTO: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Type */
            type: string;
            /** Message */
            message: string;
            /** Read */
            read: boolean;
            /** Created At */
            created_at: string;
            /** Payload */
            payload?: Record<string, never>;
        };
        /** UpdateChatHistoryRequest */
        UpdateChatHistoryRequest: {
            /**
             * Chat Type
             * @description Type of chat message (e.g., text, tab)
             */
            chat_type: string;
            /**
             * Text
             * @description Chat message content
             */
            text: string;
            /**
             * Tab Data
             * @description Additional tab data for tab-type messages
             */
            tab_data?: Record<string, never>;
            /**
             * Type
             * @description User or assistant message type
             */
            type: string;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp of when the message was created
             */
            created_at: string;
            /**
             * Is Deleted
             * @description Whether the chat message is deleted
             * @default false
             */
            is_deleted: boolean;
        };
        /** UpdateMeetingEventRequest */
        UpdateMeetingEventRequest: {
            /** Id */
            id: string;
            /** Workspace Id */
            workspace_id: string;
            /** Title */
            title: string;
            /** Achieved Description */
            achieved_description?: string;
            /** Password */
            password: string;
            /** Meeting Link */
            meeting_link: string;
            /** Room Id */
            room_id: string;
            /** Transcript Content */
            transcript_content?: string;
            /** Audio File Path */
            audio_file_path?: string;
            /** Audio File Name */
            audio_file_name?: string;
            /** Audio File Extension */
            audio_file_extension?: string;
            status: components["schemas"]["MeetingEventStatus"];
            /** Organizer Id */
            organizer_id?: string;
            /**
             * Participant Ids
             * @default []
             */
            participant_ids: string[];
            /** Location */
            location?: string;
        };
        /** UploadDocumentModel */
        UploadDocumentModel: {
            /** Upload Document Id */
            upload_document_id: string;
            /** Document Name */
            document_name: string;
            /** File Name */
            file_name: string;
            /** Document Path */
            document_path?: string;
            /** File Extension */
            file_extension: string;
            /** Document Content */
            document_content?: string;
            /** Encoded Document Content */
            encoded_document_content?: string;
            /**
             * Is Deleted
             * @default false
             */
            is_deleted: boolean;
            /** Created By */
            created_by: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated By */
            updated_by?: string;
            /** Updated At */
            updated_at?: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_all_workspaces_api_workspaces__get: {
        parameters: {
            query?: {
                is_deleted?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelListGetAllWorkspaceDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_workspace_api_workspaces__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Bodycreateworkspaceapiworkspacespost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetWorkspaceDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tab_api_workspaces_create_tab_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Bodycreatetabapiworkspacescreatetabpost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    related_documents_by_query_api_workspaces__workspace_id__related_documents_query_get: {
        parameters: {
            query?: {
                query?: string | null;
                limit?: number | null;
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelListGetRelatedDocumentsEmbeddingsDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tab_api_workspaces__workspace_id__tabs__tab_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                tab_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetTabDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_by_id_api_workspaces_get_workspace_by_id__workspace_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetWorkspaceDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_workspace_chat_history_api_workspaces__workspace_id__chat_history_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateChatHistoryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetWorkspaceDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_related_documents_api_workspaces_related_documents_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelListGetAllRelateDocumentDto"];
                };
            };
        };
    };
    add_comment_api_workspaces_add_comment_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    open_or_close_tab_api_workspaces_open_or_close_tab__workspace_id___tab_id___is_open__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                tab_id: string;
                is_open: boolean;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workspace_api_workspaces_delete_workspace__workspace_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetWorkspaceDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resolve_comment_api_workspaces_resolve_comment__workspace_id___tab_id___comment_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                tab_id: string;
                comment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_notifications_api_notifications__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelListNotificationResponseDTO"];
                };
            };
        };
    };
    create_notification_api_notifications__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelNotificationResponseDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_notification_api_notifications__notification_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelNotificationResponseDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    mark_notification_read_status_api_notifications__notification_id__read_put: {
        parameters: {
            query: {
                status: boolean;
            };
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelbool"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    protected_route_api_meeting_events_protected_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_all_meeting_events_api_meeting_events_workspace__workspace_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelListGetMeetingEventDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_meeting_event_by_id_api_meeting_events__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetMeetingEventDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_meeting_event_api_meeting_events__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMeetingEventRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetMeetingEventDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_meeting_event_api_meeting_events__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelNoneType"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_room_password_api_meeting_events_room_verify_password_post: {
        parameters: {
            query: {
                room_id: string;
                password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_meeting_event_api_meeting_events__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatedMeetingEventRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModelGetMeetingEventDto"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_document_api_documents_upload_post: {
        parameters: {
            query?: {
                dependencies?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Bodyuploaddocumentapidocumentsuploadpost"];
            };
        };
        responses: {
            /** @description Details of the uploaded document */
            201: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_api_documents_search_get: {
        parameters: {
            query: {
                /** @description Search query string. */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of documents matching the search query. */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_api_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_files_api_s3_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
        };
    };
    upload_file_api_s3_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Bodyuploadfileapis3uploadpost"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_file_api_s3_download__file_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_file_api_s3_delete__file_name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponseModeldict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_openapi_json_openapi_json_get: {
        parameters: {
            query: {
                app: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    "Access-Control-Allow-Origin"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
